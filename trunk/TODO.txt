$Id$

This is a list of stuff that we'd like to do at some point:
* Support for multiple accounts with different blog providers
* Allow enabling/disabling plugins
* Progress bar when uploading a picture (consider rewriting all the code in (done)
* Complete options dialog 
* Options for each plugin separatly
* Allow plugins to store settings in main config file
* Write plugin to auto substitute keywords with preconfigured values
* Unified error/warning/info reporting mechanism, not just for Blogger status messages
* Rename variables such as a0 and pp to more obvious ones
* Make setpreview more efficient - it's updated on every key stroke, rather than 
  only when the preview is being shown. This could be done using the tab widget's 
  signal handlers (done)
* Better command line argument handling (done. should be refined in kde)

* Proposed data schema for multiple accounts/blogs
  +--------------+       +------------+       +-----------+
  | Name         |       | Name       |       | Postnr    |
  | Host         +------>+ URL        +------>+ Timestamp |
  | Hosttype     | 1:N   | Rel        | 1:N   | Title     |
  | URL          |       | Type       |       | Body      |
  | Login        |       | ID         |       | ..        |
  | Password     |       | Account Nr |       +-----------+
  | Blogs        |       | ..         |
  | Selectedblog |       +------------+
  | Account NR   |
  +--------------+ 
     Account                Blog                 Post
  
  The Application can hold multiple Account objects which in turn can own 
  multiple Blog objects. Blog objects can own any number of Posts. The Blog 
  objects themselves should be able to provide the application with an 
  interface like:
  * deletePost(postnr)
  * sendPost()
  * updatePost(postnr)
  * fetchPosts()
  * getTitle(postnr)
  * getBody(postnr)
  * ..
  
  From the interface it should be fairly obvious that the actual Post objects
  are not to be accessed directly. The Blog object should be responsible for 
  saving them to a file, retrieving their info, etc. This allows for a nice 
  generic API. Perhaps at a later stage we can create a generic storage class
  that can use various backends without the upper layers knowing about it.
  Blog data should not be accessed directly, rather through wrapper functions,
  the only things that should be passed to functions such as sendPost and 
  updatePost are the blog's title and body text. The Blog class should be a base
  class from which the various special Blog sub classes should inherit their 
  basic API.

  Accounts should have an interface that can do things like:
  * Login()
  * FetchBlogs()
  * ..

  Like the Blog class, the Account class should be a base class with a generic 
  API.
  
  The Application itself should hold the information regarding the currently
  selected blog. 

  Needless to say, this design will require further refinement.
