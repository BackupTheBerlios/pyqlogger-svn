from qt import *
import pickle

image0_data = \
    "\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d" \
    "\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10" \
    "\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x02" \
    "\x43\x49\x44\x41\x54\x38\x8d\x85\x92\xcf\x4f\x13" \
    "\x41\x14\xc7\x3f\xb3\x3f\xba\x74\xbb\x80\x2d\x29" \
    "\x62\xd0\x48\x44\x4c\x6c\xd4\x8b\x91\x98\xa0\x89" \
    "\x27\x12\x35\x1e\xbc\x72\x32\xf1\xe6\xc1\xff\x02" \
    "\x4f\x5e\xfc\x0b\x08\xf1\xa2\x77\xa3\x07\x82\x26" \
    "\x7a\xc7\x80\x1a\x63\x50\x41\x25\x10\x0a\x94\xd2" \
    "\x6e\x77\xdb\xdd\x9d\x19\x0f\xfd\x21\xa5\x89\xbc" \
    "\xe4\x4d\x26\x93\x37\x9f\xf7\x9d\xef\x1b\xb1\xf2" \
    "\x65\x5d\xbb\xae\xc3\xe1\x68\x44\x31\x51\x23\xa1" \
    "\x52\xfc\xc3\x85\x8d\x47\x84\xd1\xd5\xea\xf6\xb7" \
    "\xf2\xfc\xda\xc2\x9b\x27\x33\x2b\xf1\xd6\xe1\x5a" \
    "\xcb\x75\x1d\xc6\xc7\x46\x3a\x07\x5a\x6b\xea\x51" \
    "\x42\x1c\x29\xaa\x7b\x2f\x19\xbe\xb2\x86\x28\x8f" \
    "\xf6\xe7\x9d\xdc\xc3\xed\xf7\xc6\x12\x30\xd7\x05" \
    "\xe0\x48\x08\x21\xb0\x4c\x03\x15\x6c\x70\xc2\x7d" \
    "\x85\x28\x06\xf0\xfd\x2d\xc1\xd7\xc1\xb8\x31\x5c" \
    "\xf8\x09\x1f\xbb\xea\x8d\xa3\x00\x00\x81\x46\x94" \
    "\x17\x70\x52\x9f\x60\xc7\x44\x95\x6c\x56\xfb\x6e" \
    "\x0c\x84\x33\xb3\xb3\x4f\x9f\x3d\x3f\x77\x2c\x80" \
    "\x7a\x09\xa3\xf6\x1a\xc3\x6f\x80\x74\xd8\xdd\xf5" \
    "\x08\x0a\x77\xd0\x2a\x99\x3a\x28\xef\x4d\x1d\x0f" \
    "\xf0\x97\xb1\xe2\x0f\x88\x7a\x86\xa4\x3a\xc0\xc1" \
    "\xe8\x34\xd9\xc2\x24\xfd\xfd\x2e\x61\x58\xfb\xff" \
    "\x13\x34\xa0\x36\xe6\x30\x5d\x0f\x62\x8f\x5a\x30" \
    "\x42\x38\x76\x8b\x4c\x2e\x8f\x6d\xdb\x3d\xbd\x7a" \
    "\x4c\x54\x3b\x9f\x31\x33\x6b\x50\xf5\xa0\x6e\x53" \
    "\x49\x9d\xc7\x2d\xdc\xc4\x74\x52\x58\x96\xd9\xaa" \
    "\xca\x8a\xd6\xdd\xa4\x03\xd0\x80\x8e\x43\x54\xe9" \
    "\x05\x96\x9d\x86\x86\x49\x54\x33\x38\x38\x75\x9b" \
    "\xdc\xd0\x49\xa4\x94\xa0\x35\x95\x4a\x25\x0d\xe4" \
    "\x5b\xea\x6b\x16\x80\x54\x0a\xa9\x34\xba\xfc\x03" \
    "\x33\x55\x82\xc0\x03\x04\xc5\x92\x60\xe8\xfe\x5d" \
    "\x12\x99\x10\x04\x21\x41\x10\xe0\x57\x7d\x07\x68" \
    "\x4b\x71\x2d\x00\xad\x40\x49\x8d\x96\x12\x53\xe6" \
    "\x81\x06\xfe\x7e\x95\x6a\xfe\x3a\x56\x23\x26\x8a" \
    "\x03\x92\x38\x41\x49\xd9\x94\x7a\xc8\xae\x2e\x0f" \
    "\x64\x62\x22\xe4\x35\x12\x3d\xc1\xaf\xcd\x25\xd4" \
    "\xa5\x49\x48\x12\xb4\xd2\x08\x21\x10\x42\x60\x18" \
    "\x86\x02\xea\xed\xec\x02\xec\xed\x87\xac\x2f\xaf" \
    "\x92\x13\x0a\x7d\xf1\x1e\x76\xfe\x34\xba\xd5\xd1" \
    "\x30\x0c\x9c\x3e\x87\xc1\xec\x60\x0d\x28\xc3\xbe" \
    "\xee\x8c\xb1\xad\x2a\x8e\x14\xe5\xdf\x45\xec\xcb" \
    "\xd3\xb8\x67\x26\x30\x0c\x13\xdb\xb6\xf1\xbc\x0c" \
    "\xb9\x5c\x16\xd7\x75\x49\xa7\xd3\xb2\x7d\xb9\x33" \
    "\x46\x21\x9a\x39\x7c\x76\x9c\xec\x83\xc7\x08\xd7" \
    "\x43\x2b\x48\xa4\xc2\xb2\x2c\x94\xd2\x28\xa5\x10" \
    "\x42\xf4\xfe\x83\xcd\xad\x6d\x16\x17\xdf\xfd\x73" \
    "\x46\xeb\xa6\x22\x0d\xba\xb9\xa0\x5b\x7b\xdf\xaf" \
    "\xf5\x00\xfe\x02\x6a\x54\x04\xed\x71\xd2\x6d\x13" \
    "\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82"
image1_data = \
    "\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d" \
    "\x49\x48\x44\x52\x00\x00\x00\x11\x00\x00\x00\x10" \
    "\x08\x06\x00\x00\x00\xf0\x31\x94\x5f\x00\x00\x00" \
    "\x7d\x49\x44\x41\x54\x38\x8d\xed\xd2\x3d\x0a\xc2" \
    "\x60\x10\x84\xe1\x67\x12\xbb\x88\x96\x82\xa7\xd0" \
    "\x3b\x79\x91\xdc\xd0\x73\xd8\x09\x5a\x86\xcf\xc2" \
    "\x04\x14\x9b\xfc\x58\x58\x38\xb0\x2c\x5b\xcc\xbb" \
    "\xb3\xb0\xfc\x9a\xca\x8c\xda\xa0\x86\xa0\x94\x52" \
    "\x26\x6f\x4d\x02\x7b\x5c\xaa\x85\x17\x1c\xd1\xbc" \
    "\x41\x92\x68\xdb\x76\x0a\xa4\x41\xbd\x34\x09\xf8" \
    "\x43\x3e\xb5\x7a\x1d\xe6\xfc\xcb\x57\x93\x6c\x93" \
    "\x5c\x67\x78\x4f\xb8\xa3\x4b\x9f\x66\x87\x83\xe7" \
    "\xf3\x64\x24\xe4\x86\x33\x2e\x83\xa1\xc2\xba\xef" \
    "\x63\x21\xdd\x90\xe4\x01\x1f\xe2\x20\x4c\x33\x23" \
    "\xcb\xe7\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42" \
    "\x60\x82"
image2_data = \
    "\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d" \
    "\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10" \
    "\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x02" \
    "\x7e\x49\x44\x41\x54\x38\x8d\x7d\x93\x4b\x48\x54" \
    "\x51\x1c\xc6\x7f\xe7\xdc\x7b\xee\xd5\x19\xf3\x91" \
    "\xf6\xb0\xa4\xe8\x6d\x85\x20\x2d\x24\x28\x24\xa4" \
    "\xa0\x45\xb5\xb2\x45\xeb\x82\x22\x0a\xca\x20\xa2" \
    "\x20\x6a\x63\x0f\x88\x20\x91\xa2\x4d\x44\x9b\x40" \
    "\x08\x22\x08\x85\xa4\xa2\xac\x90\x1e\x9b\x5e\x9a" \
    "\xaf\xf2\x3d\x9a\x3a\xce\x4c\x8c\xf7\xde\x39\xa7" \
    "\x45\x33\xa9\x30\xf5\x5f\x9d\xc5\xe1\x3b\xdf\xf7" \
    "\xfb\xfe\x47\xb4\xb5\x7f\x1e\x2f\xcc\xcf\x73\xb5" \
    "\x31\x64\x46\x1b\x48\x26\x67\xf0\x3d\x9f\xf1\x89" \
    "\xa8\x0c\x7c\x3d\x19\x8b\xc5\x77\x5b\xb6\xfd\x51" \
    "\x4a\xc9\xb7\xce\x0e\x2e\x9c\x3b\x02\x80\xed\x3a" \
    "\x4e\x78\xe3\xfa\xb2\x1c\xe6\x8c\x31\x86\xa4\xa7" \
    "\x49\x05\xd0\xdd\xdb\x4f\x5e\x38\x37\xd4\xdd\x37" \
    "\xfc\x74\x60\x68\x74\xbf\xeb\xba\xcf\xe6\xde\x95" \
    "\x64\x19\x21\x04\x52\x82\x90\x1a\x69\x49\x96\x96" \
    "\x96\xb0\x63\x5b\x45\xc9\x86\x75\x2b\x5b\x94\x6d" \
    "\xd7\xea\x59\xb3\xd8\xd9\x04\x0c\x20\x00\xc7\xb1" \
    "\xe9\xed\xeb\x27\x32\x3a\x4a\x28\x9c\x43\xe0\xa7" \
    "\x9c\xe9\xe8\x54\x93\xd6\xba\x0e\xb8\xfe\x4f\x07" \
    "\x00\x42\x0a\xa4\x80\x45\x25\x0b\xf1\xb4\x60\x74" \
    "\x24\x4a\x57\x77\x3f\x4e\x8e\x43\x3c\x3e\x55\xff" \
    "\x5f\x07\x02\x90\x42\x10\xf8\x01\x15\x95\xe5\x78" \
    "\x49\x9f\xf1\xd8\x0c\x13\xc3\xc3\x28\xe5\xd0\xfe" \
    "\xa6\x2d\x0b\x03\x9d\x82\x2f\xed\xd0\xf1\x0e\x0d" \
    "\x04\x06\x02\xa5\x88\xf7\xf4\x20\xaf\xd6\xa1\x5a" \
    "\x1f\xa0\x42\x61\x1c\x47\x61\x59\x56\x16\x06\x03" \
    "\x9d\xf0\xba\x19\x12\x53\x98\x1f\x3d\x24\xb6\xd7" \
    "\x62\xbe\x77\x50\x74\xe3\x2c\x6e\x6b\x33\xb9\x2b" \
    "\x5e\xe1\x6f\xae\x42\x2e\x5e\x8e\x10\xd9\x20\x96" \
    "\xae\x81\x95\x1b\xe0\xc9\x03\xac\x8e\x3b\x84\xdf" \
    "\xb6\x21\xbb\xba\x50\x2f\x9e\xe3\x2f\x5b\xcd\xe4" \
    "\xb1\x8b\x58\x25\x4b\x50\x42\xa7\x43\x66\x04\xd2" \
    "\xe7\xa4\xb4\x11\xd5\xb5\x88\x5f\x33\xa8\xfb\xb7" \
    "\x70\x3f\x3d\x82\xc8\x24\xfe\xa6\x4a\x26\xce\x37" \
    "\xe2\xaf\x2a\xc7\x8a\xc7\xb1\x6c\x1b\x31\xc7\x82" \
    "\x9d\x81\x10\xa4\x40\x28\x0b\x5b\xe6\x20\x06\x23" \
    "\x30\x34\x06\xb1\x24\x0c\xfe\x44\x68\x81\x70\x14" \
    "\x96\x00\x4b\x64\x8a\x4e\x43\xd4\x19\xf2\xbe\x87" \
    "\x73\xaf\x01\xf7\xca\x19\x18\x8b\x92\xda\xb2\x15" \
    "\x1d\x2e\x46\xbd\xfb\x4a\xf1\x9e\x5d\xb8\x8f\x1f" \
    "\x41\x6e\x28\xfd\xfa\xac\x83\xbf\x2d\xd8\x2f\x9b" \
    "\x51\x8d\x97\x61\x64\x1c\xef\xc0\x41\x62\x77\x5b" \
    "\x48\x5c\xbb\x8d\xc9\x2f\xc0\x8a\x44\x28\x3c\x75" \
    "\x1c\x19\x19\xc1\x28\x67\x5e\xe5\xb3\x11\xaa\x6a" \
    "\x10\x35\xfb\x30\x65\x6b\xf1\x0e\x9d\xc4\x18\x83" \
    "\xbf\x77\x2f\x53\x4d\x0f\x09\x9d\x3e\x41\xe2\xf0" \
    "\x51\xf4\x82\x02\x2c\x3f\x98\x17\xc1\xce\xec\x75" \
    "\xb8\x28\x1f\x2e\xdd\xc4\x00\x0a\x48\xa5\xc0\x18" \
    "\x48\xed\xac\xc6\xfb\xf0\x1e\xe1\x1b\xc2\x09\x0f" \
    "\xdb\x56\xf3\x21\x46\xa7\xa7\x13\xf5\x57\x1a\x02" \
    "\x29\xff\x34\x6a\xd0\x08\x24\xc6\x68\x8c\x01\x93" \
    "\xfe\x19\xc6\x18\x30\x06\x21\x24\xf1\xe9\xd8\x4c" \
    "\x46\xe0\x37\x5e\x86\x00\x6e\x7e\xcd\x9b\x1b\x00" \
    "\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82"



class DListWidget(QFrame):
    def __init__(self, parent, hash, forms):
        QFrame.__init__(self, parent)
        self.hash = hash
        self.forms = forms
        self.image0 = QPixmap()
        self.image0.loadFromData(image0_data,"PNG")
        self.image1 = QPixmap()
        self.image1.loadFromData(image1_data,"PNG")
        self.image2 = QPixmap()
        self.image2.loadFromData(image2_data,"PNG")
        pageTemplatesLayout = QVBoxLayout(self,11,6,"TemplatesLayout")
        layout24_2 = QHBoxLayout(None,0,6,"layout24_2")
        self.lbTemplates = QListBox(self,"lbTemplates")
        layout24_2.addWidget(self.lbTemplates)
        layout14_2 = QVBoxLayout(None,0,6,"layout14_2")

        self.btnAddTpl = QPushButton(self,"btnAddTpl")
        self.btnAddTpl.setIconSet(QIconSet(self.image0))
        self.btnAddTpl.setText("Add")
        layout14_2.addWidget(self.btnAddTpl)

        self.btnEditTpl = QPushButton(self,"btnEditTpl")
        self.btnEditTpl.setIconSet(QIconSet(self.image1))
        self.btnEditTpl.setText("Edit")
        layout14_2.addWidget(self.btnEditTpl)

        self.btnDelTpl = QPushButton(self,"btnDelTpl")
        self.btnDelTpl.setIconSet(QIconSet(self.image2))
        self.btnDelTpl.setText("Delete")        
        layout14_2.addWidget(self.btnDelTpl)
        layout24_2.addLayout(layout14_2)
        pageTemplatesLayout.addLayout(layout24_2)
        self.connect(self.btnAddTpl,SIGNAL("clicked()"),self.btnAddTpl_clicked)
        self.connect(self.btnEditTpl,SIGNAL("clicked()"),self.btnEditTpl_clicked)
        self.connect(self.btnDelTpl,SIGNAL("clicked()"),self.btnDelTpl_clicked)
        self.connect(self.lbTemplates,SIGNAL("selected(int)"),self.lbTemplates_selected)
        self.fillTemplates()
        
    def lbTemplates_selected(self, index):
        self.btnDelTpl.setEnabled(self.lbTemplates.currentItem() != -1)
        self.btnEditTpl.setEnabled(self.lbTemplates.currentItem() != -1)

    def showTemplateDialog(self, name="", content=""):
        wnd = self.forms["TemplateSettings"]
        wnd["Impl"].edtName.setText(name)
        wnd["Impl"].edtContent.setText(content)
        if wnd["Class"].exec_loop() == QDialog.Accepted:
            return (unicode(wnd["Impl"].edtName.text()),\
                            unicode(wnd["Impl"].edtContent.text()))
        return (None,None)

    def fillTemplates(self):
        self.lbTemplates.clear()
        for tpl in self.hash.keys():
            QListBoxText(self.lbTemplates, tpl)
        if self.hash:
            self.lbTemplates.setCurrentItem(0)
            self.lbTemplates_selected(0)
        else:
            self.btnDelTpl.setEnabled(False)
            self.btnEditTpl.setEnabled(False)
        
            
    def btnAddTpl_clicked(self):
        (key,value) = self.showTemplateDialog()
        if  key:
            self.hash[key] = value
            self.fillTemplates()
    
    def btnEditTpl_clicked(self):
        item =  [ i for i in self.hash.keys() if str(self.lbTemplates.currentText()) == i ]
        item = item[0]
        (key, value) = self.showTemplateDialog(item,self.hash[item])
        if key:
            del self.hash[item]
            self.hash[key] = value
            self.fillTemplates()
    
    def btnDelTpl_clicked(self):
        res = QMessageBox.warning(None,
            self.trUtf8("Confirmation"),
            self.trUtf8("""Are you absolutely sure that you want to erase <b>all</b> data inside this account (i.e. all the blogs and posts)?"""),
            self.trUtf8("&Yes"),
            self.trUtf8("&No"),
            None,
            0, -1)
        if res == 0:
            item =  [ i for i in self.hash.keys() if str(self.lbTemplates.currentText()) == i ]
            item = item[0]
            del self.hash[item]
            self.fillTemplates()


class PluginSettingsDialog(QDialog):
    def init(self, manager, plugin, forms):
        self.forms = forms
        self.manager = manager
        self.plugin = plugin
        self.lblName.setText(str(plugin.Name))
        self.lblMoreInfo.setText(["",str(plugin.Info)][bool(plugin.Info)])
        self.lblAuthor.setText(["",str(plugin.Author)][bool(plugin.Author)])
        self.lblType.setText(str(plugin.description()))
        self.grpSettings.hide()
        if self.plugin.Data.Options:
            self.setOptions()
        self.resize(self.minimumSizeHint())
        self.clearWState(Qt.WState_Polished)

     
    def setOptions(self):
        def addOption(parent, layout, option , row):
            ql = QLabel(parent)
            ql.setText(option.Name)
            col = 1
            if option.Type == "String" or option.Type == "Integer":
                qw = QLineEdit(parent)
                qw.setText(option.Value)
                if option.Type == "Integer":
                    qw.setValidator( QIntValidator(parent) )
            elif option.Type == "Boolean":
                ql.hide()
                col = 0
                qw = QCheckBox(parent)
                qw.setText(option.Name)
                qw.setChecked(bool(option.Value))
            elif option.Type == "List":
                qw = QComboBox(parent)
                tmp = option.Value.split(";")
                if len(tmp) > 2:
                    sel = int(tmp[0])
                    for it in tmp[1:]:
                        qw.insertItem(it)
                    qw.setCurrentItem(sel)
                else:
                    return
            elif option.Type == "DoubleList":
                col = 0
                ql.hide()
                hash = option.getDoubleListOptionValue()
                qw = DListWidget(parent, hash, self.forms )                
            if col:
                layout.addWidget(ql, row, 0)
            layout.addWidget(qw, row, col)
            return qw
                
        self.grpSettings.setColumnLayout(0,Qt.Vertical)
        self.grpSettings.layout().setSpacing(6)
        self.grpSettings.layout().setMargin(11) 
        self.grpSettings.show()
        Layout = QGridLayout(self.grpSettings.layout())
        row = 0
        self.opts = {}
        for opt in self.plugin.Data.Options:
            ctrl = addOption(self.grpSettings, Layout,opt,row)
            if ctrl:
                self.opts [ opt ] = ctrl
                row += 1
            
    def accept(self):
        for opt in self.plugin.Data.Options:
            ctrl = self.opts [ opt ]
            if type(ctrl) == QCheckBox:
                val = ["","True"][bool(ctrl.isChecked())]
            elif type(ctrl) == QLineEdit:
                val = unicode(ctrl.text())
            elif type(ctrl) == DListWidget:
                val = pickle.dumps( ctrl.hash )
            elif type(ctrl) == QComboBox:
                tmp = opt.Value.split(";")
                tmp[0] = str(int(ctrl.currentItem()))
                val = ";".join(tmp)
            opt.Value = val            
        QDialog.accept(self)
        