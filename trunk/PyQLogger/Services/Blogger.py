#! /usr/bin/python
## This file is part of PyQLogger.
## 
## Copyright (c) 2004 Eli Yukelzon a.k.a Reflog         
##
## PyQLogger is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
## 
## PyQLogger is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with PyQLogger; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from GenericAtom import GenericAtomService
import re
endpoints = ("/atom", "/atom/%s", "/atom/%s/%s")

class BloggerService (GenericAtomService):
    """ Wrapper for Blogger.com """
    icon = \
        "\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d" \
        "\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10" \
        "\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x01" \
        "\xf6\x49\x44\x41\x54\x38\x8d\x8d\x93\x4d\x6b\x13" \
        "\x51\x14\x86\x9f\x3b\x33\x49\x9d\x7c\x99\x7e\xa4" \
        "\x12\x6d\xc4\x62\x2b\x24\x12\x37\xee\x02\xea\x42" \
        "\xf1\x07\x54\xf4\x07\x88\xd0\x9d\x75\xa5\xe8\xd6" \
        "\x9d\xa0\x3f\x40\xd4\x85\x1b\x71\x63\x57\x42\xc1" \
        "\x5d\xd0\x45\x75\x59\x2b\x29\xc6\x20\xa4\xb4\xb5" \
        "\x06\x4d\x93\x92\xa4\x93\x99\x7b\x5d\xdc\x38\x93" \
        "\x89\x82\xbe\x70\xe1\xdc\x8f\xf7\x3d\xef\x39\x87" \
        "\x2b\xe4\xcd\xc3\x96\x97\xcd\x2f\x98\x3b\x1b\x2f" \
        "\x45\xe7\x27\x08\xfe\x0d\x09\xde\xd1\xc2\x0a\x86" \
        "\xb1\x68\x79\xd9\xc2\x82\xb9\xf5\x71\x49\x38\x9d" \
        "\xff\x23\x03\x18\x60\x34\xbe\x94\x54\x6c\xe2\x96" \
        "\x90\x4b\xe3\x4a\xf4\x5a\xa0\x3c\x7d\x29\x2c\xb0" \
        "\xd3\x10\xb1\xf5\x5e\x29\x38\x68\xc3\xc1\xde\x1f" \
        "\x3a\x2a\x62\x63\x85\x6c\x2b\xa0\x70\x11\x4e\x5f" \
        "\x86\xe4\xb4\x26\x2b\x0f\x9a\xdb\xf0\xee\x19\x34" \
        "\x6a\xa0\xa4\x2f\x20\xfa\x5d\x2c\x9f\x2c\x2c\x4d" \
        "\xbe\xfe\x5c\x93\x47\x71\xb2\x04\xaf\xee\x40\x6d" \
        "\x35\x54\xaa\xe5\x47\x76\x3a\xc8\xdc\x6b\xc3\xd7" \
        "\x0f\xd0\xef\x42\x62\x0a\x66\xce\xc0\xb1\xa2\x16" \
        "\xa9\xae\x82\x19\x6a\xc7\x00\x91\x58\x90\xb9\x51" \
        "\x83\xd7\xf7\x61\xf9\x2e\xbc\x7d\x02\xed\x5d\x88" \
        "\x8d\xc3\xfc\x79\x38\x92\x87\x68\xe2\x2f\x0e\x50" \
        "\x41\x38\x7d\x0a\xae\x3e\xd4\x4e\x26\x72\x90\xca" \
        "\x82\x10\x90\xbf\x04\xd7\x04\xbc\x79\x04\x1b\x65" \
        "\x30\x42\x02\x43\x88\xda\x90\x2d\x80\xd7\xd7\x7b" \
        "\xcf\x01\xd3\x82\xb1\x04\x1c\x3f\x0b\x93\x27\x40" \
        "\x95\x47\x1d\x0c\xa1\xb9\x09\xef\x5f\x40\xa7\x39" \
        "\x68\xb0\xd0\xf6\xe7\xce\x0d\x9c\x06\x6e\x03\x01" \
        "\x25\xc1\x73\x75\xec\x74\x61\x6b\x1d\x7a\x2d\x40" \
        "\x80\x94\x90\x99\x03\xe9\x82\xf4\xc0\x75\xfc\x49" \
        "\x04\x02\xbd\x3d\xd8\xa9\x68\xf5\xa9\x59\xb8\xf2" \
        "\x40\x3f\xfe\x8d\x43\x49\x88\xc6\x61\xfb\x13\xec" \
        "\x56\xfd\xf6\x07\x02\xce\x3e\x94\x1f\x43\x66\x16" \
        "\xe6\x2f\xc0\x58\x3c\x5c\xd6\x7e\x03\x5a\xeb\xb0" \
        "\x7c\x0f\x36\xd7\xfc\x63\xa1\x6e\xa0\x86\x86\x09" \
        "\xe9\x1c\xcc\x14\xf5\xfc\x87\x27\xe3\x3a\xf0\xbd" \
        "\x0a\xf5\x35\x90\xce\xa0\x6c\xb0\x64\xae\xb8\x62" \
        "\x7c\xfb\x5c\xc2\xed\xa5\x74\x03\xeb\xf0\xa3\x1e" \
        "\xe2\xea\x54\x10\x4a\x84\x40\xa5\x32\x15\x03\x61" \
        "\x2c\xaa\xf8\xe4\x53\xff\xf3\x30\x78\x68\x8e\xac" \
        "\x61\xb2\x02\x95\xcc\x54\x30\x23\xb7\x7f\x01\x3f" \
        "\x08\xa5\x7d\x7a\x66\x27\x6a\x00\x00\x00\x00\x49" \
        "\x45\x4e\x44\xae\x42\x60\x82"
    name = "Blogger.com"
    
    def __init__(self, host, username, password):
        GenericAtomService.__init__(self, "www.blogger.com", username, password,
                                                *endpoints)
        self.hp_re = re.compile(r'<homePageLink>(.*)</homePageLink>', re.MULTILINE)        
    
    def getEmpty():
        return BloggerService("","","")
    getEmpty = staticmethod(getEmpty)

    def getHomepage(self, blogid):
        """ Returns the homepage of the blog """
        req_url = "http://www.blogger.com/rsd.pyra?blogID=%s" % blogid
        try:
            req = urllib2.urlopen(req_url)
            lines = req.read()
            req.close()
            match = self.hp_re.search(lines)
            if match: 
                return match.group(1)
        except Exception , e:
            print "Exception while getting the homepage: " + str(e)
            return None
